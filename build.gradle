/*
 * (C) Copyright 2014 SCHMUTTERER+PARTNER IT GmbH.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}

group = 'at.schmutterer.oss.gradle'

apply plugin: 'groovy'

sourceCompatibility = 1.7
targetCompatibility = 1.7

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile 'org.apache.openjpa:openjpa:2.4.2'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
}

apply plugin: 'maven'
apply plugin: 'signing'

repositories {
    jcenter()
}

tasks.withType(GroovyCompile) {
    options.compilerArgs << "-proc:none"
}

// sonatype requires a javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar, javadocJar
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
ext.doSigning = isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives")

signing {
    required { doSigning }
    sign configurations.archives
}

gradle.taskGraph.whenReady { taskGraph ->
    if (doSigning) {
        if (!('signing.keyId' in project)) {
            throw new RuntimeException("Please configure gpg-key in gradle.properties")
        }
        if ('signing.password' in project) {
            return
        }
        Console console = System.console()
        def keyId = project."signing.keyId"
        def password = console.readPassword("\nEnter Password for GPG-key $keyId}: ")
        allprojects { ext."signing.password" = password }
        console.printf "\nThanks.\n\n"
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            def ossrhUsername = System.getenv("OSSRH_USER")
            def ossrhPassword = System.getenv("OSSRH_PASSWORD")

            beforeDeployment { MavenDeployment deployment ->
                if (doSigning) {
                    signing.signPom(deployment)
                }
            }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            // fill in requried properties for sonatype
            pom.project {
                name project.name
                description "gradle-plugin that enhances entity-classes with OpenJPA code"

                url 'http://github.com/schmutterer/gradle-openjpa'

                scm {
                    url 'scm:git@github.com:schmutterer/gradle-openjpa.git'
                    connection 'scm:git@github.com:schmutterer/gradle-openjpa.git'
                    developerConnection 'scm:git@github.com:schmutterer/gradle-openjpa.git'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'christophgritschenberger'
                        name 'Christoph Gritschenberger'
                    }
                }
            }
        }
    }
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'net.researchgate:gradle-release:2.6.0'
    }
}

apply plugin: 'net.researchgate.release'
createReleaseTag.dependsOn uploadArchives

defaultTasks = ['clean', 'build']
